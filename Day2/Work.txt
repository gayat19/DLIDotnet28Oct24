//// See https://aka.ms/new-console-template for more information
//Console.WriteLine("Hello, World!");
//int num1;
//char myChar1 = 'a';
//string myName = "3";
////num1 =myChar1;
//num1 = Convert.ToInt32(myName);//unboxing - ref type to value type
//num1 = int.Parse(myName);//unboxing - ref type to value type
//Console.WriteLine(++num1);
//Console.WriteLine("------------------");
//myName = null;
//num1 = Convert.ToInt32(myName);
//Console.WriteLine("New value of num "+num1);
//Console.WriteLine("------------Parse");
//myName = null;
//num1 = int.Parse(myName);
//Console.WriteLine("New value of num " + num1);
//best practice
//int num1;
//Console.WriteLine("Please enter a number");
//string strNum1 =Console.ReadLine();
//bool parseResult = int.TryParse(strNum1, out num1);
//if (parseResult)
//{
//    num1++;
//    Console.WriteLine("The incremented value is " + num1);
//}
//else
//{
//    Console.WriteLine("Unable to parse");
//}

//int num1;
//Console.WriteLine("Please enter a number");
//string strNum1 ;
//while (int.TryParse(Console.ReadLine(), out num1) == false)
//{
//    Console.WriteLine("Invalid entry for whole number. Please try again");
//}
//num1++;
//Console.WriteLine("The incremented value is " + num1);
//int num1 = int.MaxValue;
//Console.WriteLine(num1);
//checked
//{
//    num1+=10;
//    Console.WriteLine("After increment " + num1);
//}
//float num1 = float.MaxValue;
SOLID principles???
Single Responsibility
Open and closed
Liskov Sub 
Interface seg
Dependency Inversion







//Console.WriteLine(num1);
//if (num1 <= float.MaxValue)
//{
//    num1 += float.MaxValue;
//    Console.WriteLine("After increment " + num1);
//}
//else
//    Console.WriteLine("Already full");
//float num1 = 10.3f;
//float num2 = 10.378f;
//Console.WriteLine(MathF.Max(num1,num2));

//Console.WriteLine("Float min and max");
//Console.WriteLine(float.MinValue);
//Console.WriteLine(float.MaxValue);
//Console.WriteLine("Decimal min and max");
//Console.WriteLine(decimal.MinValue);
//Console.WriteLine(decimal.MaxValue);
//decimal num1 = decimal.MaxValue;
//num1++;
//Console.WriteLine(num1);
-----------------------------------------------------
Id - GUID/int/string
Name - string 
Price - float
Quantity - int
Description -string 
basicimage - string

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BackToBasicsApp.Models
{
    public class Product : IComparable<Product>//, IEquatable<Product>
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public float Price { get; set; }
        public int Quantity { get; set; }
        //or
        //public Nullable<int> Quantity { get; set; }
        public string BasicImgae { get; set; }
        public Product()
        {
            Name = string.Empty;
            Description = string.Empty;
            BasicImgae = string.Empty;
        }

        //public Product(int id, string name, float price, int? quantity, string? description, string? basicImgae)
        //{
        //    Id = id;
        //    Name = name;
        //    Description = description??string.Empty;
        //    Price = price;
        //    Quantity = quantity??0;
        //    BasicImgae = basicImgae ?? string.Empty;
        //}
        public Product(int id, string name, float price) : this()
        {
            Id = id;
            Name = name;
            Price = price;
        }
        public override string ToString()
        {
            return $"Id {Id} \tName: {Name} \tPrice {Price} \tQuantity {Quantity}";
        }

        public int CompareTo(Product? other)
        {
            var product = other ?? new Product() { Price=0};
            return this.Price.CompareTo(product.Price);
        }

        public bool Equals(Product? other)
        {
            var product = other ?? new Product() { Price = 0, Name = string.Empty };
            return this.Price.Equals(product.Price) && this.Name.Equals(product.Name);
        }
        //public override bool Equals(object? obj)
        //{
        //    var product = (obj??new Product()) as Product;
        //    return this.Price.Equals(product.Price) && this.Name.Equals(product.Name);
        //}
    }
}

-------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BackToBasicsApp.Models
{
    public enum ProductMediaType
    {
        Image,Video, Audio
    }
    public class Media
    {
        public Media()
        {
            MediaUrl = string.Empty;
        }
        public int Id { get; set; }
        public string MediaUrl { get; set; } 
        public int ProductId { get; set; }
        public ProductMediaType MediaType { get; set; }
        public override string ToString()
        {
            return $"Id {Id} \tMediaUrl {MediaUrl??"No image present"} \tType: {MediaType}";
        }
    }
    public class UpdatedMedia:Media
    {
        public DateOnly CreatedDate { get; set; }
        public UpdatedMedia()
        {
            
        }
        public UpdatedMedia(DateOnly createdDate):base()
        {
            CreatedDate = createdDate;
        }

        public override string ToString()
        {
            return base.ToString() + $"\t Created Date :{CreatedDate}";
        }
    }
}
----------------------------------------
////int num1 = 0;
////num1 = null;//Not possible because int is primitive value type
//int? num1 =10;
////num1 = null;//possible because its a nullable type

//int num2 = (num1??0) + 100;//num1 is null it will take 0 as the value- we have acheived this usinga  null collasing operator
//Console.WriteLine($"The value of num2 is {num2}");//interpllation- feature of C#8 and above

using BackToBasicsApp.Models;

Product product = new Product() { Id = 101, Name = "Pencil", Price = 5, Quantity = 10, BasicImgae = "" };
Media pencilMedia = new UpdatedMedia { Id = 1, ProductId = 101, MediaType = ProductMediaType.Video, MediaUrl = "" };
Console.WriteLine(product);
Console.WriteLine(pencilMedia);
------------------------------------------------------
using BackToBasicsApp.Exceptions;
using BackToBasicsApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BackToBasicsApp.Repositories
{
    public class ProductRepository
    {
        Dictionary<int, Product> products = new Dictionary<int, Product>()
        {
            {101, new Product() { Id = 101, Name = "Pencil", Price = 5, Quantity = 10, BasicImgae = "" } },
            {102, new Product() { Id = 102, Name = "Eraser", Price = 3, Quantity = 7, BasicImgae = "" } },
            {103, new Product() { Id = 103, Name = "Pencil", Price = 5, Quantity = 10, BasicImgae = "" } }
        };
        public Product Add(Product product) 
        {
            if (products.ContainsValue(product))
                throw new ProductAlreadyExistsException();
            products.Add(product.Id, product);
            return product;
        }
    }
}
----------------------------------------------------------------
namespace BackToBasicsApp.Exceptions
{

    public class ProductAlreadyExistsException : Exception
    {
        readonly string _message;
        public ProductAlreadyExistsException()
        {
            _message = "Product with the same Id already is present";
        }
        public override string Message => _message;
    }
}
---------------------------------------------------------------
////int num1 = 0;
////num1 = null;//Not possible because int is primitive value type
//int? num1 =10;
////num1 = null;//possible because its a nullable type

//int num2 = (num1??0) + 100;//num1 is null it will take 0 as the value- we have acheived this usinga  null collasing operator
//Console.WriteLine($"The value of num2 is {num2}");//interpllation- feature of C#8 and above

using BackToBasicsApp.Models;
using BackToBasicsApp.Repositories;

Product product = new Product() { Id = 101, Name = "Pencil", Price = 5, Quantity = 10, BasicImgae = "" };
Media pencilMedia = new UpdatedMedia { Id = 1, ProductId = 101, MediaType = ProductMediaType.Video };
//Console.WriteLine(product);
//Console.WriteLine(pencilMedia);
ProductRepository repository = new ProductRepository();
try
{
    repository.Add(product);
}
catch (Exception e)
{
    Console.WriteLine(product+" - "+e.Message);
}







